---
title: "Stats Reminder Project - Instructions"
author: "MP Etienne"
format:
  html:
    theme: cosmo
    css: theme.css
    toc: true
    toc_float: true
---


## Project Overview {#sec-overview}

**Team project** for groups of **3 students**. Create examples demonstrating statistical/mathematical methods applied to ecological questions.

**Repository**: `https://github.com/MarieEtienne/stats-reminder`

::: {.callout-important}
## Deliverables
Each team creates **1 example** among one of the major theme:

- Linear models
- Differential equations  
- Multivariate analysis

Each student should devote time to the review process ass well

The repository will close on December 1st at 1PM and only the work merged on master will be reviewed and evaluated.

Final mark for this assignment will consider

* Mastering git workflow (commit, pull push , handling conflict, Pull Request, optimmaly rebase to have a clean history)

* Taking part of the reviewing process to increase global quality of the project

During the last lab on git, November 5th, students will have a test to evaluate the overall understanding of git process

The final grad will be based on both evaluation
:::

---

## Project requirements {#sec-requirements}

### Content

Each `.qmd` example must include:

- Clear ecological question with real/realistic data
- Proper cross-references: sections (`@sec-methods`), figures (`@fig-plot`), tables (`@tbl-results`) or equations (`@eq-model`)
- Citations and bibliography
- Well-documented code and results

### Git Workflow

1. **One branch per example**: `team-[names]-[method]-[description]`
2. **Update `_quarto.yml`** to include your examples in the website structure (see @sec-quarto-config)
3. Optimally **Rebase before PR** to ensure linear history (see @sec-rebase)
4. **PR requirements** (see @sec-pr-requirements):
   - âœ… No merge conflicts
   - âœ… Automated checks pass
   - âœ… One peer review
   - âœ… At least one discussion thread

---

## Git Workflow {#sec-workflow}

### Setup

```bash
# Clone repository
git clone https://github.com/MarieEtienne/stats-reminder.git
cd stats-reminder

# Create team branch
git switch -b teamA
git push origin teamA
```

### Create one branch per task {#sec-branches}

```bash
# From your team branch, create example branches
git switch teamA
git switch -b teamA-intro

# Work on your .qmd file
git add linear_model_teamA.qmd
git commit -m "Add linear model example"
....
git fetch origin teamA
git rebase teamA 

# If conflicts: resolve, then
git add <resolved-files>
git rebase --continue

# switch to team branch and update the branch with this neaw linear history
git switch teamA
git merge teamA-intro
```


### Updating `_quarto.yml` {#sec-quarto-config}

Add your examples to the website structure:

```yaml
website:
  navbar:
    left:
      - text: "Team Examples"
        menu:
          - text: "Team Smith"
            menu:
              - text: "Plant Growth (Linear)"
                href: linear_model_teamA.qmd
              - text: "Predator-Prey (Diff Eq)"
                href: team-smith-diffeq-predator.qmd
```

---

### Update Before PR {#sec-rebase}

::: {.callout-warning}
Always rebase on master before creating PR to ensure clean linear history and avoid conflicts.
:::

```bash
git switch teamA
git switch -c teamA_PR #create a new branch to avoid destruction

# Fetch and rebase
git fetch origin master
git rebase origin/master

# If conflicts: resolve, then
git add <resolved-files>
git rebase --continue

# push teamA_PR and ask for PR in github, there should be no conflict
git push origin teamA_PR
```

## Pull Requests {#sec-pull-requests}

### Creating a PR

1. Go to repository â†’ **Pull requests** â†’ **New pull request**
2. Base: `master`, Compare: `teamA_PR`
3. Write clear description (method, question, team)

### PR Requirements {#sec-pr-requirements}

All must be met before merge:

- âœ… **No conflicts** (rebase if needed, see @sec-rebase)
- âœ… **Automated checks pass** (builds website successfully)
- âœ… **One review** from peer/instructor
- âœ… **One discussion thread** (respond to reviewer comments)

After merge, the website automatically deploys to GitHub Pages.

[Be careful that, history in teamA and teamA_PR differ, and teamA_PR is the one to be merged. So if you want to add more contents to your project, remove local and remote teamA branch (and teamA_PR once merge into master) and starts a new branch from the current master branch]{.care}

---

## Cross-References & Citations {#sec-markdown}

### Cross-References

````markdown
## Methods {#sec-methods}

The model (@eq-linear) uses data shown in @fig-scatter and @tbl-summary.

$$ y = \beta_0 + \beta_1 x $$ {#eq-linear}

```{{r}}
#| label: fig-scatter
#| fig-cap: "Relationship between variables"
plot(x, y)
```

As described in @sec-methods...
````

### Citations

Create `references.bib`:
```bibtex
@article{smith2020,
  author = {Smith, J.},
  title = {Statistical Methods},
  journal = {Ecology},
  year = {2020}
}
```

In your YAML:
```yaml
bibliography: references.bib
```

In text:
```markdown
According to @smith2020, the method...
```

---

## Important Rules {#sec-rules}

::: {.callout-important}
- **Master is protected** - you cannot push directly
- **Use rebase** not merge (see @sec-rebase) as much as possible, that is the good practice
- **Pass all checks** before requesting merge
:::

---

## Common Issues {#sec-troubleshooting}

**Build failing:** Check logs for syntax errors in `.qmd`, missing packages, broken cross-references, or invalid `_quarto.yml`.

**Can't push to master:** Expected! Create a branch instead (see @sec-branches).

---

## Checklist {#sec-checklist}

Before submitting PR:

- [ ] `_quarto.yml` updated
- [ ] Cross-references used throughout
- [ ] Citations included
- [ ] No conflicts
- [ ] Rebased on master
- [ ] PR created with clear description
- [ ] Checks passing
- [ ] Review requested

---

## Resources {#sec-resources}

- [Quarto Cross-References](https://quarto.org/docs/authoring/cross-references.html)
- [Git Rebase Tutorial](https://git-scm.com/book/en/v2/Git-Branching-Rebasing)
- [Creating Pull Requests](https://docs.github.com/en/pull-requests)

Questions? Check GitHub Issues or contact the instructor. Good luck! ðŸš€

