---
title: "EDO prédation"
format: html
editor: visual
---


```{r}
## Packages
library(ggplot2)
library(dplyr)
library(tidyr)
```


**INTRODUCTION** :

When having a dynamic system modeled by an ODE, we usually can't find a mathematical solution. Thus, we have 2 options : a numerical approach and a qualitative one. Here, we will focus on the latter, that is to say qualitatively predict the evolution (in terms of behavior) of N(t) (the number of the population at time t), in particular asymptotically.

Looking at lynx and hare pelts from the Hudson's Bay Company's (fur-collecting) trappers' hunts over a 90-year period, we see that the number of hare and lynx pelts is correlated. If we assume that the number of pelts collected is proportional to the total population, then we arrive at the conclusion that the hare and lynx population is correlated with a phase shift of a few years for the lynx.

What is the intuition behind this? Lynxes need hares to survive, and so the lynx population can only grow if the hare population grows. There's a time lag: when the lynx population is low, the hare population begins to grow. The lynxes then begin to have food again, and will then grow again and begin to massacre a large part of the hare population, only to run out of food. Then the cycle begins again.

**Logistic Prey-Predator model (in a limited environment)** :

$$
\begin{cases} 
\frac{dN}{dt}=r_1N(1-\frac{N}{K})-b_1NP \\
\frac{dP}{dt}=-r_2P+b_2NP
\end{cases}
$$

The parameters are the following ones (they are all positive :) ) :

| Parameters | Meaning                             |
|------------|-------------------------------------|
| $r_{1}$    | growth rate of preys' population    |
| $r_{2}$    | death rate of predators' population |
| $b_{1}$    | predation efficiency                |
| $b_{2}$    | predation yield                     |
| ${K}$      | biotic capacity                     |

The overall expected mecanism is the following :

```{r}
Proiepred<- function(t, y, parameters) {
  N <- y[1]
  P <- y[2]
  r1 <- parameters[1]
  r2 <- parameters[2]
  b1 <- parameters[3]
  b2 <- parameters[4]
  dPop <- numeric(2)
  dPop[1] <- r1*N - b1*N*P
  dPop[2] <- - r2*P + b2*N*P
  list(dPop)
}
```



```{r}
##Fonction simulation trajectoires
equation_proie <- function(N,P,r1,b1,K){
  return(r1*N*(1-(N/K))-b1*N*P)
}

equation_predateur <- function(N,P,r2,b2){
  return(-r2*P+b2*N*P)
}

## N_0   : effectif des proies au temps 0 
## P_0   : effectif des prédateurs au temps 0
## t_end : temps final de la simulation
## pas   : pas de temps
## r1    : taux de reproduction intrinsèque des proies
## b1    : taux de mortalités des proies dû aux prédateurs
## r2    : taux de reproduction des prédateur en fonction des proies 
## b2    : taux de mortalité intrinsèques des prédateurs
## K     : capacité de charge des proies
simul_traj <- function(N_0,P_0,t_end,pas,r1,b1,r2,b2,K){
  list_N <- c(N_0)
  dN <- N_0
  list_P <- c(P_0)
  dP <- P_0
  list_t <- c(0)
  t <- 0
  while (t<t_end){
    t<- t+pas
    list_t <- c(list_t,t)
    dN <- equation_proie(dN,dP,r1,b1,K)*pas
    if (dN<0){dN <- 0}
    dP <- equation_predateur(dN,dP,r2,b2)*pas
    if (dP<0){dP <- 0}
    list_N <- c(list_N,dN)
    list_P <- c(list_P,dP)
  }
  #return(list(list_N=list_N,list_P=list_P,list_t=list_t))
  
  ##data_wrangling
  data <- data.frame(time=list_t,prey=list_N,predator=list_P)
  data <- gather(data,key="specie",value="number",prey:predator)
  
  ##plot
  plot <- ggplot(data,aes(x=time,y=number,color=specie,group=specie)) +
    geom_line()
  plot
}

##Just for the example of the function
simul_traj(100,5,100,1,1.5,0.05,0.5,0.05,500)


```
